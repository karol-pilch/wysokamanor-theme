<?php
/**
 * Prints the debug message to a file. Replacement for missing drupal_debug.
 *
 * @param mixed $var
 *   The variable to print
 * @param string $label
 *   (Optional) The label to print before the variable.
 */
function wm_debug($var, $label = NULL) {
	$path = drupal_get_path('theme', 'wm') . '/debug.txt';
	try {
		$output = ($label ? "\n$label: ": "\n");
		$output .= print_r($var, TRUE);
		file_put_contents($path, $output, FILE_APPEND);
	}
	catch (Exception $e) {
		trigger_exception("Failed to write debug information.", E_USER_WARNING);
	}
}

/**
 * Implements hook_preprocess_menu().
 *
 * Adds the image URL to menu link items so that we can use them in the template.
 */
function wm_preprocess_menu(&$variables, $hook) {
	$variables['#attached']['library'][] = 'wm/supernav';
	if ($hook == 'menu__main' || $hook == 'menu__front_page_links') {
    if (count($variables['items'])) {
      foreach ($variables['items'] as $mlid => &$link_variables) {

				// Get the URL to the page from the link.
				$url = \Drupal::service('plugin.manager.menu.link')
					->createInstance($mlid)
					->getUrlObject();

				$internal_path = NULL;
				if ($url->isRouted()) {
					$internal_path = $url->getInternalPath();
				}
				else {
					$internal_path = \Drupal::service('path.alias_manager')->getPathByAlias($url->toString());
				}

				// Tell the link it's current because sometimes this doesn't work.
				if ($url->toString() == \Drupal::service('path.current')->getPath()) {
					$link_variables['is_current'] = TRUE;
				}

				// Get the node behind the link.
				$nid = preg_replace('/\/?node\//', '', $internal_path);
				if (is_numeric($nid)) {
					$node_storage = \Drupal::entityManager()->getStorage('node');
					$node = \Drupal::entityManager()->getStorage('node')->load($nid);

					// Get the field_menu_image field from the node
					if ($node->hasField('field_menu_image')) {
						$image_field = $node->get('field_menu_image');
						if ($image_field->count()) {

							// Transform the file URI into a URL usable in CSS.
							$fid = $image_field->get(0)->getValue()['target_id'];
							$uri = \Drupal\file\Entity\File::load($fid)->getFileUri();
              $link_variables['image_url'] = file_create_url($uri);
						}
					}
				}
      }
    }
	}
}

/**
 * Implements hook_preprocess_field().
 *
 * Adds nice class name to selected fields.
 */
function wm_preprocess_field(&$variables, $hook) {
	// Add a class to some fields:
  $process_fields = array(
		'story_author_name',
		'story_author_about',
		'story_body',
		'story_footer_image',
		'illustrated_section',
	);

  $field_name = $variables['field_name'];

	foreach ($process_fields as $name) {
		if ($field_name == "field_$name") {
			$variables['attributes']['class'][] = 'wm-' . str_replace('_', '-', $name);
		}
	}

	if ($field_name == 'field_front_page_section') {
		$section_number = 1;
		foreach ($variables['items'] as &$item) {
			if ($item['content']['#field_collection_item']->get('field_fronta_page_section_header')->count() > 0) {
				$section_number++;
			}
			$item['content']['#section_number'] = $section_number;
			// I know this is weird but it's the only way to get it to work.
		}
	}
}

/**
 * Implements template_preprocess_image_style().
 *
 * Adds the full image URL as a custom attribute to the <img> tag.
 */
function wm_preprocess_image_style(&$variables) {
  $uri = $variables['uri'];
  $variables['image']['#attributes']['data-full-src'] = file_url_transform_relative(file_create_url($uri));
}

/**
 * Implements hook_preprocess_page().
 *
 * Used to attach correct libraries to content types.
 */
function wm_preprocess_page(&$variables) {

	// TODO: See if we can get rid of this:
	if (isset($variables['node'])) {
		$node_type = $variables['node']->getType();

		switch ($node_type) {
			case 'front_page':
				$variables['#attached']['library'][] = 'wm/front-page';
				break;

			case 'story_page':
				$variables['#attached']['library'][] = 'wm/story-page';
				break;

			case 'illustrated_page':
				$variables['#attached']['library'][] = 'wm/illustrated-page';
				break;
		}
	}
}

function wm_preprocess_node(&$variables) {
	$variables['site_name'] = \Drupal::config('system.site')->get('name');
}

function wm_preprocess_form(&$variables) {
	$form_name = isset($variables['element']['form_id']['#value']) ? $variables['element']['form_id']['#value'] : '';
	if ($form_name == 'contact_message_stay_enquiry_form') {
		$variables['#attached']['library'][] = 'wm/contact';
	}
}
